//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Controller Support/Controller Input System.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControllerInputSystem : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControllerInputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controller Input System"",
    ""maps"": [
        {
            ""name"": ""Controller"",
            ""id"": ""1e548947-3ff2-4a35-9938-f8a5987b867e"",
            ""actions"": [
                {
                    ""name"": ""Open/Close Menu"",
                    ""type"": ""Button"",
                    ""id"": ""8278867f-e7ea-4a69-bb59-4a388fc7c010"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""81add9f6-7850-433f-81ab-e723da96e887"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cycle Left"",
                    ""type"": ""Button"",
                    ""id"": ""0db35b3a-1ed9-4e89-9449-508112d3641d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cycle Right"",
                    ""type"": ""Button"",
                    ""id"": ""b1df3cab-4b8b-4ddc-85d1-d97e46277fa0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use Item"",
                    ""type"": ""Button"",
                    ""id"": ""e5532005-303c-4ae6-8f47-44f09592a12f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cycle Up"",
                    ""type"": ""Button"",
                    ""id"": ""b5b71259-5711-4e7c-9162-e2e02b512bbf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cycle Down"",
                    ""type"": ""Button"",
                    ""id"": ""82a2a5c0-e35b-43f2-85f1-5d9b86ff4a74"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ItemSelectionLeft"",
                    ""type"": ""Button"",
                    ""id"": ""eb654a4b-5573-4a96-a21c-2a46a72dfa68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ItemSelectionRight"",
                    ""type"": ""Button"",
                    ""id"": ""63b51c8b-4936-47bf-a259-dc2d4cc28266"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DropItem"",
                    ""type"": ""Button"",
                    ""id"": ""3fe638e8-fc19-4c8b-aa20-c81b8a7424df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Button"",
                    ""id"": ""853f11b2-40e8-4c8a-8207-1c5bc7ed8c8d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ccd4806e-dcec-4f1f-9860-dab274e286e3"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open/Close Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b51a1a5-4444-42ca-b656-f33abd5b2043"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51438a3a-c3b9-46ca-a7dc-9bc0a7f48598"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cycle Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c388806a-857d-4dca-b4d4-d41e9912332d"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cycle Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1bb4f5d6-f42b-4038-b226-5ec2885d500c"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cycle Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08461dde-b7f0-4540-91b7-322aee7b969b"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cycle Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec213cf3-1853-467d-bbc6-cc89749a4fc6"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use Item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f02e9c0f-0bfa-4041-bc60-0db47a2e728e"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cycle Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd4a2b22-01b5-4522-a30f-26609989be8e"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cycle Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c32654c-4263-476f-abbe-0ea7f55c6b75"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemSelectionLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9862f376-13f9-4555-9a65-b73a128f9529"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemSelectionRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79348e72-f1de-48f1-bffa-720bd71e5313"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DropItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2a93efd-8b15-43a8-975f-e99b45656c3c"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Controller
        m_Controller = asset.FindActionMap("Controller", throwIfNotFound: true);
        m_Controller_OpenCloseMenu = m_Controller.FindAction("Open/Close Menu", throwIfNotFound: true);
        m_Controller_Interact = m_Controller.FindAction("Interact", throwIfNotFound: true);
        m_Controller_CycleLeft = m_Controller.FindAction("Cycle Left", throwIfNotFound: true);
        m_Controller_CycleRight = m_Controller.FindAction("Cycle Right", throwIfNotFound: true);
        m_Controller_UseItem = m_Controller.FindAction("Use Item", throwIfNotFound: true);
        m_Controller_CycleUp = m_Controller.FindAction("Cycle Up", throwIfNotFound: true);
        m_Controller_CycleDown = m_Controller.FindAction("Cycle Down", throwIfNotFound: true);
        m_Controller_ItemSelectionLeft = m_Controller.FindAction("ItemSelectionLeft", throwIfNotFound: true);
        m_Controller_ItemSelectionRight = m_Controller.FindAction("ItemSelectionRight", throwIfNotFound: true);
        m_Controller_DropItem = m_Controller.FindAction("DropItem", throwIfNotFound: true);
        m_Controller_Pickup = m_Controller.FindAction("Pickup", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controller
    private readonly InputActionMap m_Controller;
    private IControllerActions m_ControllerActionsCallbackInterface;
    private readonly InputAction m_Controller_OpenCloseMenu;
    private readonly InputAction m_Controller_Interact;
    private readonly InputAction m_Controller_CycleLeft;
    private readonly InputAction m_Controller_CycleRight;
    private readonly InputAction m_Controller_UseItem;
    private readonly InputAction m_Controller_CycleUp;
    private readonly InputAction m_Controller_CycleDown;
    private readonly InputAction m_Controller_ItemSelectionLeft;
    private readonly InputAction m_Controller_ItemSelectionRight;
    private readonly InputAction m_Controller_DropItem;
    private readonly InputAction m_Controller_Pickup;
    public struct ControllerActions
    {
        private @ControllerInputSystem m_Wrapper;
        public ControllerActions(@ControllerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenCloseMenu => m_Wrapper.m_Controller_OpenCloseMenu;
        public InputAction @Interact => m_Wrapper.m_Controller_Interact;
        public InputAction @CycleLeft => m_Wrapper.m_Controller_CycleLeft;
        public InputAction @CycleRight => m_Wrapper.m_Controller_CycleRight;
        public InputAction @UseItem => m_Wrapper.m_Controller_UseItem;
        public InputAction @CycleUp => m_Wrapper.m_Controller_CycleUp;
        public InputAction @CycleDown => m_Wrapper.m_Controller_CycleDown;
        public InputAction @ItemSelectionLeft => m_Wrapper.m_Controller_ItemSelectionLeft;
        public InputAction @ItemSelectionRight => m_Wrapper.m_Controller_ItemSelectionRight;
        public InputAction @DropItem => m_Wrapper.m_Controller_DropItem;
        public InputAction @Pickup => m_Wrapper.m_Controller_Pickup;
        public InputActionMap Get() { return m_Wrapper.m_Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerActions set) { return set.Get(); }
        public void SetCallbacks(IControllerActions instance)
        {
            if (m_Wrapper.m_ControllerActionsCallbackInterface != null)
            {
                @OpenCloseMenu.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnOpenCloseMenu;
                @OpenCloseMenu.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnOpenCloseMenu;
                @OpenCloseMenu.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnOpenCloseMenu;
                @Interact.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnInteract;
                @CycleLeft.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnCycleLeft;
                @CycleLeft.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnCycleLeft;
                @CycleLeft.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnCycleLeft;
                @CycleRight.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnCycleRight;
                @CycleRight.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnCycleRight;
                @CycleRight.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnCycleRight;
                @UseItem.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnUseItem;
                @UseItem.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnUseItem;
                @UseItem.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnUseItem;
                @CycleUp.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnCycleUp;
                @CycleUp.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnCycleUp;
                @CycleUp.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnCycleUp;
                @CycleDown.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnCycleDown;
                @CycleDown.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnCycleDown;
                @CycleDown.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnCycleDown;
                @ItemSelectionLeft.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnItemSelectionLeft;
                @ItemSelectionLeft.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnItemSelectionLeft;
                @ItemSelectionLeft.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnItemSelectionLeft;
                @ItemSelectionRight.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnItemSelectionRight;
                @ItemSelectionRight.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnItemSelectionRight;
                @ItemSelectionRight.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnItemSelectionRight;
                @DropItem.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnDropItem;
                @DropItem.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnDropItem;
                @DropItem.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnDropItem;
                @Pickup.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnPickup;
                @Pickup.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnPickup;
                @Pickup.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnPickup;
            }
            m_Wrapper.m_ControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @OpenCloseMenu.started += instance.OnOpenCloseMenu;
                @OpenCloseMenu.performed += instance.OnOpenCloseMenu;
                @OpenCloseMenu.canceled += instance.OnOpenCloseMenu;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @CycleLeft.started += instance.OnCycleLeft;
                @CycleLeft.performed += instance.OnCycleLeft;
                @CycleLeft.canceled += instance.OnCycleLeft;
                @CycleRight.started += instance.OnCycleRight;
                @CycleRight.performed += instance.OnCycleRight;
                @CycleRight.canceled += instance.OnCycleRight;
                @UseItem.started += instance.OnUseItem;
                @UseItem.performed += instance.OnUseItem;
                @UseItem.canceled += instance.OnUseItem;
                @CycleUp.started += instance.OnCycleUp;
                @CycleUp.performed += instance.OnCycleUp;
                @CycleUp.canceled += instance.OnCycleUp;
                @CycleDown.started += instance.OnCycleDown;
                @CycleDown.performed += instance.OnCycleDown;
                @CycleDown.canceled += instance.OnCycleDown;
                @ItemSelectionLeft.started += instance.OnItemSelectionLeft;
                @ItemSelectionLeft.performed += instance.OnItemSelectionLeft;
                @ItemSelectionLeft.canceled += instance.OnItemSelectionLeft;
                @ItemSelectionRight.started += instance.OnItemSelectionRight;
                @ItemSelectionRight.performed += instance.OnItemSelectionRight;
                @ItemSelectionRight.canceled += instance.OnItemSelectionRight;
                @DropItem.started += instance.OnDropItem;
                @DropItem.performed += instance.OnDropItem;
                @DropItem.canceled += instance.OnDropItem;
                @Pickup.started += instance.OnPickup;
                @Pickup.performed += instance.OnPickup;
                @Pickup.canceled += instance.OnPickup;
            }
        }
    }
    public ControllerActions @Controller => new ControllerActions(this);
    public interface IControllerActions
    {
        void OnOpenCloseMenu(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnCycleLeft(InputAction.CallbackContext context);
        void OnCycleRight(InputAction.CallbackContext context);
        void OnUseItem(InputAction.CallbackContext context);
        void OnCycleUp(InputAction.CallbackContext context);
        void OnCycleDown(InputAction.CallbackContext context);
        void OnItemSelectionLeft(InputAction.CallbackContext context);
        void OnItemSelectionRight(InputAction.CallbackContext context);
        void OnDropItem(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
    }
}
